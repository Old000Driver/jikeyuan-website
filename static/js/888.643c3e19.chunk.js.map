{"version":3,"file":"static/js/888.643c3e19.chunk.js","mappings":"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","sources":["apis/article.js","hooks/useChannel.js","pages/Article/index.js"],"sourcesContent":["// 封装和文章相关的接口函数\r\n\r\nimport { request } from \"@/utils\"\r\n\r\n// 1. 获取频道列表\r\nexport function getChannelAPI () {\r\n  return request({\r\n    url: '/channels',\r\n    method: 'GET'\r\n  })\r\n}\r\n\r\n// 2. 提交文章表单\r\n\r\nexport function createArticleAPI (data) {\r\n  return request({\r\n    url: '/mp/articles?draft=false',\r\n    method: 'POST',\r\n    data\r\n  })\r\n}\r\n\r\n// 更新文章表单\r\n\r\nexport function updateArticleAPI (data) {\r\n  return request({\r\n    url: `/mp/articles/${data.id}?draft=false`,\r\n    method: 'PUT',\r\n    data\r\n  })\r\n}\r\n\r\n\r\n// 获取文章列表\r\n\r\nexport function getArticleListAPI (params) {\r\n  return request({\r\n    url: \"/mp/articles\",\r\n    method: 'GET',\r\n    params\r\n  })\r\n}\r\n\r\n\r\n// 删除文章\r\n\r\nexport function delArticleAPI (id) {\r\n  return request({\r\n    url: `/mp/articles/${id}`,\r\n    method: 'DELETE'\r\n  })\r\n}\r\n\r\n\r\n// 获取文章详情\r\n\r\nexport function getArticleById (id) {\r\n  return request({\r\n    url: `/mp/articles/${id}`\r\n  })\r\n}\r\n\r\n","// 封装获取频道列表的逻辑\r\nimport { useState, useEffect } from 'react'\r\nimport { getChannelAPI } from '@/apis/article'\r\nfunction useChannel () {\r\n  // 1. 获取频道列表所有的逻辑\r\n  // 获取频道列表\r\n  const [channelList, setChannelList] = useState([])\r\n\r\n  useEffect(() => {\r\n    // 1. 封装函数 在函数体内调用接口\r\n    const getChannelList = async () => {\r\n      const res = await getChannelAPI()\r\n      setChannelList(res.data.channels)\r\n    }\r\n    // 2. 调用函数\r\n    getChannelList()\r\n  }, [])\r\n  // 2. 把组件中要用到的数据return出去\r\n  return {\r\n    channelList\r\n  }\r\n}\r\n\r\nexport { useChannel }","import { Link, useNavigate } from 'react-router-dom'\r\nimport { Card, Breadcrumb, Form, Button, Radio, DatePicker, Select, Popconfirm } from 'antd'\r\n// 引入汉化包 时间选择器显示中文\r\nimport locale from 'antd/es/date-picker/locale/zh_CN'\r\n\r\n// 导入资源\r\nimport { Table, Tag, Space } from 'antd'\r\nimport { EditOutlined, DeleteOutlined } from '@ant-design/icons'\r\nimport img404 from '@/assets/error.png'\r\nimport { useChannel } from '@/hooks/useChannel'\r\nimport { useEffect, useState } from 'react'\r\nimport { delArticleAPI, getArticleListAPI } from '@/apis/article'\r\n\r\nconst { Option } = Select\r\nconst { RangePicker } = DatePicker\r\n\r\nconst Article = () => {\r\n  const navigate = useNavigate()\r\n  const { channelList } = useChannel()\r\n  // 准备列数据\r\n  // 定义状态枚举\r\n  const status = {\r\n    1: <Tag color='warning'>待审核</Tag>,\r\n    2: <Tag color='success'>审核通过</Tag>,\r\n  }\r\n  const columns = [\r\n    {\r\n      title: '封面',\r\n      dataIndex: 'cover',\r\n      width: 120,\r\n      render: cover => {\r\n        return <img src={cover.images[0] || img404} width={80} height={60} alt=\"\" />\r\n      }\r\n    },\r\n    {\r\n      title: '标题',\r\n      dataIndex: 'title',\r\n      width: 220\r\n    },\r\n    {\r\n      title: '状态',\r\n      dataIndex: 'status',\r\n      // data - 后端返回的状态status 根据它做条件渲染\r\n      // data === 1 => 待审核\r\n      // data === 2 => 审核通过\r\n      render: data => status[data]\r\n    },\r\n    {\r\n      title: '发布时间',\r\n      dataIndex: 'pubdate'\r\n    },\r\n    {\r\n      title: '阅读数',\r\n      dataIndex: 'read_count'\r\n    },\r\n    {\r\n      title: '评论数',\r\n      dataIndex: 'comment_count'\r\n    },\r\n    {\r\n      title: '点赞数',\r\n      dataIndex: 'like_count'\r\n    },\r\n    {\r\n      title: '操作',\r\n      render: data => {\r\n        return (\r\n          <Space size=\"middle\">\r\n            <Button type=\"primary\" shape=\"circle\" icon={<EditOutlined />} onClick={() => navigate(`/publish?id=${data.id}`)} />\r\n            <Popconfirm\r\n              title=\"删除文章\"\r\n              description=\"确认要删除当前文章吗?\"\r\n              onConfirm={() => onConfirm(data)}\r\n              okText=\"Yes\"\r\n              cancelText=\"No\"\r\n            >\r\n              <Button\r\n                type=\"primary\"\r\n                danger\r\n                shape=\"circle\"\r\n                icon={<DeleteOutlined />}\r\n              />\r\n            </Popconfirm>\r\n          </Space>\r\n        )\r\n      }\r\n    }\r\n  ]\r\n\r\n  // 筛选功能\r\n  // 1. 准备参数\r\n  const [reqData, setReqData] = useState({\r\n    status: '',\r\n    channel_id: '',\r\n    begin_pubdate: '',\r\n    end_pubdate: '',\r\n    page: 1,\r\n    per_page: 4\r\n  })\r\n\r\n  // 获取文章列表\r\n  const [list, setList] = useState([])\r\n  const [count, setCount] = useState(0)\r\n  useEffect(() => {\r\n    async function getList () {\r\n      const res = await getArticleListAPI(reqData)\r\n      setList(res.data.results)\r\n      setCount(res.data.total_count)\r\n    }\r\n    getList()\r\n  }, [reqData])\r\n\r\n\r\n  // 2. 获取筛选数据\r\n  const onFinish = (formValue) => {\r\n    console.log(formValue)\r\n    // 3. 把表单收集到数据放到参数中(不可变的方式)\r\n    setReqData({\r\n      ...reqData,\r\n      channel_id: formValue.channel_id,\r\n      status: formValue.status,\r\n      begin_pubdate: formValue.date[0].format('YYYY-MM-DD'),\r\n      end_pubdate: formValue.date[1].format('YYYY-MM-DD')\r\n    })\r\n    // 4. 重新拉取文章列表 + 渲染table逻辑重复的 - 复用\r\n    // reqData依赖项发生变化 重复执行副作用函数 \r\n  }\r\n\r\n  // 分页\r\n  const onPageChange = (page) => {\r\n    console.log(page)\r\n    // 修改参数依赖项 引发数据的重新获取列表渲染\r\n    setReqData({\r\n      ...reqData,\r\n      page\r\n    })\r\n  }\r\n\r\n  // 删除\r\n  const onConfirm = async (data) => {\r\n    console.log('删除点击了', data)\r\n    await delArticleAPI(data.id)\r\n    setReqData({\r\n      ...reqData\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Card\r\n        title={\r\n          <Breadcrumb items={[\r\n            { title: <Link to={'/'}>首页</Link> },\r\n            { title: '文章列表' },\r\n          ]} />\r\n        }\r\n        style={{ marginBottom: 20 }}\r\n      >\r\n        <Form initialValues={{ status: '' }} onFinish={onFinish}>\r\n          <Form.Item label=\"状态\" name=\"status\">\r\n            <Radio.Group>\r\n              <Radio value={''}>全部</Radio>\r\n              <Radio value={1}>待审核</Radio>\r\n              <Radio value={2}>审核通过</Radio>\r\n            </Radio.Group>\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"频道\" name=\"channel_id\">\r\n            <Select\r\n              placeholder=\"请选择文章频道\"\r\n              style={{ width: 120 }}\r\n            >\r\n              {channelList.map(item => <Option key={item.id} value={item.id}>{item.name}</Option>)}\r\n            </Select>\r\n          </Form.Item>\r\n\r\n          <Form.Item label=\"日期\" name=\"date\">\r\n            {/* 传入locale属性 控制中文显示*/}\r\n            <RangePicker locale={locale}></RangePicker>\r\n          </Form.Item>\r\n\r\n          <Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" style={{ marginLeft: 40 }}>\r\n              筛选\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </Card>\r\n      {/* 表格区域 */}\r\n      <Card title={`根据筛选条件共查询到 ${count} 条结果：`}>\r\n        <Table rowKey=\"id\" columns={columns} dataSource={list} pagination={{\r\n          total: count,\r\n          pageSize: reqData.per_page,\r\n          onChange: onPageChange\r\n        }} />\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Article"],"names":["getChannelAPI","request","url","method","createArticleAPI","data","updateArticleAPI","id","getArticleListAPI","params","delArticleAPI","getArticleById","useChannel","channelList","setChannelList","useState","useEffect","async","res","channels","getChannelList","Option","Select","RangePicker","DatePicker","Article","navigate","useNavigate","status","_jsx","Tag","color","children","columns","title","dataIndex","width","render","cover","src","images","height","alt","_jsxs","Space","size","Button","type","shape","icon","EditOutlined","onClick","Popconfirm","description","onConfirm","okText","cancelText","danger","DeleteOutlined","reqData","setReqData","channel_id","begin_pubdate","end_pubdate","page","per_page","list","setList","count","setCount","results","total_count","getList","console","log","Card","Breadcrumb","items","Link","to","style","marginBottom","Form","initialValues","onFinish","formValue","date","format","Item","label","name","Radio","value","placeholder","map","item","locale","htmlType","marginLeft","Table","rowKey","dataSource","pagination","total","pageSize","onChange"],"sourceRoot":""}